{
  "id": "course-schedule",
  "title": "Course Schedule",
  "difficulty": "Medium",
  "description": "There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai. Return true if you can finish all courses. Otherwise, return false.",
  "completed": false,
  "topic": "graphs",
  "timeEstimate": "30 min",
  "companies": ["Amazon", "Microsoft", "Google", "Facebook"],
  "examples": [
    {
      "input": "numCourses = 2, prerequisites = [[1,0]]",
      "output": "true",
      "explanation": "To take course 1 you should have finished course 0. So it is possible."
    },
    {
      "input": "numCourses = 2, prerequisites = [[1,0],[0,1]]",
      "output": "false",
      "explanation": "To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible."
    },
    {
      "input": "numCourses = 3, prerequisites = [[1,0],[2,1]]",
      "output": "true"
    }
  ],
  "constraints": [
    "1 <= numCourses <= 2000",
    "0 <= prerequisites.length <= 5000",
    "prerequisites[i].length == 2",
    "0 <= ai, bi < numCourses",
    "All the pairs prerequisites[i] are unique."
  ],
  "starterCode": "function canFinish(numCourses, prerequisites) {\n    // Your code here\n    \n}",
  "hints": [
    "This is a classic topological sorting problem.",
    "Think about detecting cycles in a directed graph.",
    "You can use DFS with a visited state tracking or Kahn's algorithm with in-degrees."
  ]
}