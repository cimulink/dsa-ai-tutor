{
  "id": "merge-two-lists",
  "title": "Merge Two Sorted Lists",
  "difficulty": "Easy",
  "description": "You are given the heads of two sorted linked lists list1 and list2. Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists. Return the head of the merged linked list.",
  "completed": false,
  "topic": "linked-lists",
  "timeEstimate": "20 min",
  "companies": ["Amazon", "Microsoft", "Adobe", "Google"],
  "examples": [
    {
      "input": "list1 = [1,2,4], list2 = [1,3,4]",
      "output": "[1,1,2,3,4,4]"
    },
    {
      "input": "list1 = [], list2 = []",
      "output": "[]"
    },
    {
      "input": "list1 = [], list2 = [0]",
      "output": "[0]"
    }
  ],
  "constraints": [
    "The number of nodes in both lists is in the range [0, 50].",
    "-100 <= Node.val <= 100",
    "Both list1 and list2 are sorted in non-decreasing order."
  ],
  "starterCode": "function mergeTwoLists(list1, list2) {\n    // Your code here\n    \n}",
  "hints": [
    "Use a dummy head to simplify the logic.",
    "Compare the values of the current nodes from both lists.",
    "Attach the smaller node to the result list and advance the corresponding pointer."
  ],
  "preProcessCode": "class ListNode {\n    constructor(val, next) {\n        this.val = (val===undefined ? 0 : val);\n        this.next = (next===undefined ? null : next);\n    }\n}\n\nfunction arrayToLinkedList(arr) {\n  if (arr.length === 0) return null;\n  \n  const head = new ListNode(arr[0]);\n  let current = head;\n  \n  for (let i = 1; i < arr.length; i++) {\n    current.next = new ListNode(arr[i]);\n    current = current.next;\n  }\n  \n  return head;\n}",
  "postProcessCode": "function linkedListToArray(head) {\n  // Handle null or empty array cases\n  if (head === null || (Array.isArray(head) && head.length === 0)) {\n    return [];\n  }\n  \n  const result = [];\n  let current = head;\n  \n  while (current !== null) {\n    result.push(current.val);\n    current = current.next;\n  }\n  \n  return result;\n}"
}