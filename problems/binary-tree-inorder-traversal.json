{
  "id": "binary-tree-inorder-traversal",
  "title": "Binary Tree Inorder Traversal",
  "difficulty": "Easy",
  "description": "Given the root of a binary tree, return the inorder traversal of its nodes' values.",
  "completed": false,
  "topic": "trees",
  "timeEstimate": "20 min",
  "companies": ["Amazon", "Microsoft", "Google"],
  "examples": [
    {
      "input": "root = [1,null,2,3]",
      "output": "[1,3,2]"
    },
    {
      "input": "root = []",
      "output": "[]"
    },
    {
      "input": "root = [1]",
      "output": "[1]"
    }
  ],
  "constraints": [
    "The number of nodes in the tree is in the range [0, 100].",
    "-100 <= Node.val <= 100"
  ],
  "starterCode": "// Definition for a binary tree node.\n// class TreeNode {\n//     constructor(val, left, right) {\n//         this.val = (val===undefined ? 0 : val);\n//         this.left = (left===undefined ? null : left);\n//         this.right = (right===undefined ? null : right);\n//     }\n// }\n\nfunction inorderTraversal(root) {\n    // Your code here\n    // Return an array of node values in inorder traversal\n    \n}",
  "preProcessCode": "class TreeNode {\n    constructor(val, left, right) {\n        this.val = (val===undefined ? 0 : val);\n        this.left = (left===undefined ? null : left);\n        this.right = (right===undefined ? null : right);\n    }\n}\n\nfunction arrayToBinaryTree(arr) {\n  if (!arr || arr.length === 0 || arr[0] === null) return null;\n  \n  const root = new TreeNode(arr[0]);\n  const queue = [root];\n  let i = 1;\n  \n  while (queue.length > 0 && i < arr.length) {\n    const current = queue.shift();\n    \n    // Add left child\n    if (i < arr.length && arr[i] !== null) {\n      current.left = new TreeNode(arr[i]);\n      queue.push(current.left);\n    }\n    i++;\n    \n    // Add right child\n    if (i < arr.length && arr[i] !== null) {\n      current.right = new TreeNode(arr[i]);\n      queue.push(current.right);\n    }\n    i++;\n  }\n  \n  return root;\n}",
  "postProcessCode": "function processResult(result) {\n  return result;\n}",
  "hints": [
    "Inorder traversal visits nodes in the order: left subtree, root, right subtree.",
    "Think about both recursive and iterative approaches.",
    "For the iterative approach, consider using a stack to simulate the recursion."
  ]
}