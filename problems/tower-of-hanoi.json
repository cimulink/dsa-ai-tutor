{
  "id": "tower-of-hanoi",
  "title": "Tower of Hanoi",
  "difficulty": "Medium",
  "description": "In the Tower of Hanoi problem, we have 3 rods and N disks. The objective of the puzzle is to move the entire stack to another rod, obeying the following simple rules: 1) Only one disk can be moved at a time. 2) Each move consists of taking the upper disk from one of the stacks and placing it on top of another stack i.e. a disk can only be moved if it is the uppermost disk on a stack. 3) No disk may be placed on top of a smaller disk. Write a program to move the disks from the first rod to the last rod.",
  "completed": false,
  "topic": "recursion",
  "timeEstimate": "30 min",
  "companies": ["Microsoft", "Amazon", "Apple", "Google"],
  "examples": [
    {
      "input": "n = 1",
      "output": "[[1,3]]",
      "explanation": "Move disk 1 from rod 1 to rod 3"
    },
    {
      "input": "n = 2",
      "output": "[[1,2],[1,3],[2,3]]",
      "explanation": "Move disk 1 from rod 1 to rod 2, disk 2 from rod 1 to rod 3, then disk 1 from rod 2 to rod 3"
    },
    {
      "input": "n = 3",
      "output": "[[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3]]"
    }
  ],
  "constraints": [
    "1 <= n <= 10"
  ],
  "starterCode": "function towerOfHanoi(n) {\n    // Your code here\n    // Return an array of moves, where each move is [fromRod, toRod]\n    \n}",
  "hints": [
    "Think recursively - to move n disks from rod A to rod C, you need to move n-1 disks from A to B, then move the largest disk from A to C, then move n-1 disks from B to C.",
    "The base case is when n = 1, which requires just one move.",
    "You can use an auxiliary array to collect the moves."
  ]
}